// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pappion.Infrastructure;

#nullable disable

namespace Pappion.Infrastructure.Migrations
{
    [DbContext(typeof(PappionDbContext))]
    [Migration("20230609112357_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid?>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FavorId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6136b1d6-f67e-4d70-8990-136d4b77de16"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("6ffeae74-bee4-4363-8dda-0c35a56cc196"),
                            SenderId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            Text = "Увага! це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("f1f5404f-d8fb-4857-8f3c-5d7a44d41239"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            Text = "Гаррі це дуже файний пацан! Стоп...",
                            UserId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620")
                        },
                        new
                        {
                            Id = new Guid("667e0e5c-302f-4ca0-a045-291caafcc157"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("15d225f5-a1a4-44c5-a95b-7c253e49aebd"),
                            SenderId = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            Text = "Незабутні враження від Карпат це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("2dcd3d38-2051-4f1d-999f-caa713a06dc5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            Text = "Еран це дуже файний пацан! Стоп...",
                            UserId = new Guid("7c183954-3105-4c15-85c8-25d802f80444")
                        },
                        new
                        {
                            Id = new Guid("980f7b4d-5442-4e16-a0d7-fc4a21aa88b2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("4e4bfb8e-18ae-4b63-96b4-dfe7ba49b422"),
                            SenderId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            Text = "Смаколики Карпатської кухні це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("5f748a4c-d184-416e-bede-e15681d1fcbf"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            Text = "Ґеральт це дуже файний пацан! Стоп...",
                            UserId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01")
                        },
                        new
                        {
                            Id = new Guid("20e3aa12-ab7b-4268-a192-7cfbd016d66b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("d8f90b51-d740-414b-a5e9-8e53be29b038"),
                            SenderId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            Text = "Неймовірні пейзажі Карпат це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("c13b1312-537d-46d2-9708-41fe5e224fb3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            Text = "Тайлер це дуже файний пацан! Стоп...",
                            UserId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70")
                        },
                        new
                        {
                            Id = new Guid("44614829-36e3-4513-a18c-6e2f84e7b0c9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("7324a2dd-c7e6-4733-8546-729480427ee1"),
                            SenderId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            Text = "Зимові пригоди у Карпатах це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("604a0989-395f-43f3-accf-51de92b6969b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            Text = "Біллі це дуже файний пацан! Стоп...",
                            UserId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Favors");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorImages", b =>
                {
                    b.Property<Guid>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("FavorId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("FavorImages");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorTags", b =>
                {
                    b.Property<Guid>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("FavorId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FavorTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9f631fc-cccd-4a1a-85ef-d8e3a1080c94"),
                            Path = "a22e6b90-2f26-4355-a03f-6612ff03453d.png"
                        },
                        new
                        {
                            Id = new Guid("b66f9c9c-566c-42ce-8eb5-8b115160ff65"),
                            Path = "e0086126-583f-4897-a034-d9f5ad887c38.png"
                        },
                        new
                        {
                            Id = new Guid("bb4de83a-6bb0-48ed-a93f-cf1153b905b4"),
                            Path = "cf4d95ea-ef96-4836-b536-a4cfa6f763c7.png"
                        },
                        new
                        {
                            Id = new Guid("feadd9cc-1f41-4913-8b07-0df9d81a51b9"),
                            Path = "c654d531-dac8-419a-87f7-07dd234118fc.png"
                        },
                        new
                        {
                            Id = new Guid("0d041849-6db3-4121-823e-292792be1160"),
                            Path = "9b99c996-2e80-45c8-a915-393d79d8408a.png"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid?>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FavorId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3afe540-9a3d-4c8d-a22e-1b325c69a4b9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("6ffeae74-bee4-4363-8dda-0c35a56cc196"),
                            SenderId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620")
                        },
                        new
                        {
                            Id = new Guid("52a314d3-4c6c-4751-8687-39d3cddb4ad4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            UserId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620")
                        },
                        new
                        {
                            Id = new Guid("289ba152-e654-49d6-9564-b10b5b439e2a"),
                            CommentId = new Guid("6136b1d6-f67e-4d70-8990-136d4b77de16"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620")
                        },
                        new
                        {
                            Id = new Guid("161eb5bb-f637-4430-ae56-88a6a2df2ee7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("15d225f5-a1a4-44c5-a95b-7c253e49aebd"),
                            SenderId = new Guid("7c183954-3105-4c15-85c8-25d802f80444")
                        },
                        new
                        {
                            Id = new Guid("31a39ff1-2f1d-4639-a3fb-bdb3c3238871"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            UserId = new Guid("7c183954-3105-4c15-85c8-25d802f80444")
                        },
                        new
                        {
                            Id = new Guid("c63bfa73-b7da-4855-9144-589d878ec4a7"),
                            CommentId = new Guid("f1f5404f-d8fb-4857-8f3c-5d7a44d41239"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("7c183954-3105-4c15-85c8-25d802f80444")
                        },
                        new
                        {
                            Id = new Guid("6adc7af6-11e2-4207-92c3-b226eb0d6a87"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("4e4bfb8e-18ae-4b63-96b4-dfe7ba49b422"),
                            SenderId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01")
                        },
                        new
                        {
                            Id = new Guid("a08e114e-5b36-4aeb-9a5a-f52f5794010c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            UserId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01")
                        },
                        new
                        {
                            Id = new Guid("ef19127d-557a-44b6-9048-44850540e380"),
                            CommentId = new Guid("667e0e5c-302f-4ca0-a045-291caafcc157"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01")
                        },
                        new
                        {
                            Id = new Guid("e0d230ff-ce58-49f0-aa08-90fd92abdf79"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("d8f90b51-d740-414b-a5e9-8e53be29b038"),
                            SenderId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70")
                        },
                        new
                        {
                            Id = new Guid("6ccf79ef-fc3d-4c59-b57e-f0fd4b9591b5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            UserId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70")
                        },
                        new
                        {
                            Id = new Guid("0511df8d-f798-4fdc-aab4-a838680292bc"),
                            CommentId = new Guid("2dcd3d38-2051-4f1d-999f-caa713a06dc5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70")
                        },
                        new
                        {
                            Id = new Guid("2e500fc7-dd0f-4bfe-bf15-abda50ea00ad"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("7324a2dd-c7e6-4733-8546-729480427ee1"),
                            SenderId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8")
                        },
                        new
                        {
                            Id = new Guid("773ed362-bb73-4270-a7ff-6c1e79e8216a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            UserId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8")
                        },
                        new
                        {
                            Id = new Guid("e6b7eb6c-ee77-41d1-9a21-17c2deeec3fa"),
                            CommentId = new Guid("980f7b4d-5442-4e16-a0d7-fc4a21aa88b2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyImages", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PartyImages");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyTags", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PartyTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyUsers", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PartyUsers");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ffeae74-bee4-4363-8dda-0c35a56cc196"),
                            AuthorId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            CreatedDate = new DateTime(2023, 6, 9, 14, 23, 57, 574, DateTimeKind.Local).AddTicks(6931),
                            Description = "Карпати інфо шахраї! Я забронювала собі номер в одній з камер Азкабану, але дементори мене туди не впустили. Це жах!",
                            Title = "Увага!"
                        },
                        new
                        {
                            Id = new Guid("15d225f5-a1a4-44c5-a95b-7c253e49aebd"),
                            AuthorId = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            CreatedDate = new DateTime(2023, 6, 9, 14, 23, 57, 574, DateTimeKind.Local).AddTicks(6989),
                            Description = "Нещодавно повернулися з унікальної подорожі до Карпат і просто захоплюємося цим мальовничим куточком природи. Гірські ландшафти та заповідні ліси залишили незабутні враження в нашій пам'яті. Рекомендуємо всім любителям пригод відвідати цю частину України!",
                            Title = "Незабутні враження від Карпат"
                        },
                        new
                        {
                            Id = new Guid("4e4bfb8e-18ae-4b63-96b4-dfe7ba49b422"),
                            AuthorId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            CreatedDate = new DateTime(2023, 6, 9, 14, 23, 57, 574, DateTimeKind.Local).AddTicks(6996),
                            Description = "Під час нашої поїздки в Карпати ми не лише насолоджувалися природою, але й смакували справжні кулінарні шедеври. Місцеві страви, такі як вершкові гриби та банош, просто вражають своїм неповторним смаком. Рекомендуємо спробувати!",
                            Title = "Смаколики Карпатської кухні"
                        },
                        new
                        {
                            Id = new Guid("d8f90b51-d740-414b-a5e9-8e53be29b038"),
                            AuthorId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            CreatedDate = new DateTime(2023, 6, 9, 14, 23, 57, 574, DateTimeKind.Local).AddTicks(7003),
                            Description = "Під час наших пішохідних прогулянок по Карпатах ми були просто зачаровані мальовничими пейзажами, які відкривалися перед нами. Гірські потоки, зелені луки та красиві гори - все це створює незабутню атмосферу та надихає на нові відкриття. Рекомендуємо це місце для всіх любителів активного відпочинку та красивої природи!",
                            Title = "Неймовірні пейзажі Карпат"
                        },
                        new
                        {
                            Id = new Guid("7324a2dd-c7e6-4733-8546-729480427ee1"),
                            AuthorId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            CreatedDate = new DateTime(2023, 6, 9, 14, 23, 57, 574, DateTimeKind.Local).AddTicks(7010),
                            Description = "Наша зимова подорож до Карпат принесла нам незабутні враження від катання на лижах. Добре обладнані гірськолижні курорти та різноманітні траси задовольнять навіть найвибагливіших любителів лижного спорту. Насолоджуйтесь зимовими пригодами у Карпатах!",
                            Title = "Зимові пригоди у Карпатах"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostImages", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PostImages");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("6ffeae74-bee4-4363-8dda-0c35a56cc196"),
                            ImageId = new Guid("a9f631fc-cccd-4a1a-85ef-d8e3a1080c94")
                        },
                        new
                        {
                            PostId = new Guid("15d225f5-a1a4-44c5-a95b-7c253e49aebd"),
                            ImageId = new Guid("b66f9c9c-566c-42ce-8eb5-8b115160ff65")
                        },
                        new
                        {
                            PostId = new Guid("4e4bfb8e-18ae-4b63-96b4-dfe7ba49b422"),
                            ImageId = new Guid("bb4de83a-6bb0-48ed-a93f-cf1153b905b4")
                        },
                        new
                        {
                            PostId = new Guid("d8f90b51-d740-414b-a5e9-8e53be29b038"),
                            ImageId = new Guid("feadd9cc-1f41-4913-8b07-0df9d81a51b9")
                        },
                        new
                        {
                            PostId = new Guid("7324a2dd-c7e6-4733-8546-729480427ee1"),
                            ImageId = new Guid("0d041849-6db3-4121-823e-292792be1160")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostTags", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("6ffeae74-bee4-4363-8dda-0c35a56cc196"),
                            TagId = new Guid("d8cce667-ab65-4536-a65f-30163239fdc4")
                        },
                        new
                        {
                            PostId = new Guid("15d225f5-a1a4-44c5-a95b-7c253e49aebd"),
                            TagId = new Guid("25d50f0e-0b34-482e-b186-234aaae45a04")
                        },
                        new
                        {
                            PostId = new Guid("4e4bfb8e-18ae-4b63-96b4-dfe7ba49b422"),
                            TagId = new Guid("61207f9b-99f9-46fb-a165-c163f667c05b")
                        },
                        new
                        {
                            PostId = new Guid("d8f90b51-d740-414b-a5e9-8e53be29b038"),
                            TagId = new Guid("af3ae483-929a-4c10-93b9-efb1886156ab")
                        },
                        new
                        {
                            PostId = new Guid("7324a2dd-c7e6-4733-8546-729480427ee1"),
                            TagId = new Guid("38a2b74c-e813-468e-be79-b84aa5122536")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35166f95-0fba-49eb-a8fd-18c5fa0f67db"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("898fe428-53b7-4f5d-ab90-569056306b81"),
                            Name = "Resident"
                        },
                        new
                        {
                            Id = new Guid("fb2864bc-9d83-47b0-8320-56c9d197a714"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8cce667-ab65-4536-a65f-30163239fdc4"),
                            Name = "Лижі"
                        },
                        new
                        {
                            Id = new Guid("25d50f0e-0b34-482e-b186-234aaae45a04"),
                            Name = "Сноуборд"
                        },
                        new
                        {
                            Id = new Guid("61207f9b-99f9-46fb-a165-c163f667c05b"),
                            Name = "Настільні ігри"
                        },
                        new
                        {
                            Id = new Guid("af3ae483-929a-4c10-93b9-efb1886156ab"),
                            Name = "Велосипед"
                        },
                        new
                        {
                            Id = new Guid("38a2b74c-e813-468e-be79-b84aa5122536"),
                            Name = "Кемпінг"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harrypotter@gmail.com",
                            FirstName = "Гаррі",
                            ImageId = new Guid("a9f631fc-cccd-4a1a-85ef-d8e3a1080c94"),
                            LastName = "Поттер",
                            Password = "password",
                            Rating = 3.5m,
                            RoleId = new Guid("35166f95-0fba-49eb-a8fd-18c5fa0f67db")
                        },
                        new
                        {
                            Id = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tatakae@gmail.com",
                            FirstName = "Еран",
                            ImageId = new Guid("b66f9c9c-566c-42ce-8eb5-8b115160ff65"),
                            LastName = "Єґа",
                            Password = "password",
                            Rating = 1.5m,
                            RoleId = new Guid("898fe428-53b7-4f5d-ab90-569056306b81")
                        },
                        new
                        {
                            Id = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "killing.monsters@gmail.com",
                            FirstName = "Ґеральт",
                            ImageId = new Guid("bb4de83a-6bb0-48ed-a93f-cf1153b905b4"),
                            LastName = "з Рівії",
                            Password = "password",
                            Rating = 4.5m,
                            RoleId = new Guid("fb2864bc-9d83-47b0-8320-56c9d197a714")
                        },
                        new
                        {
                            Id = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "not.exist@gmail.com",
                            FirstName = "Тайлер",
                            ImageId = new Guid("feadd9cc-1f41-4913-8b07-0df9d81a51b9"),
                            LastName = "Дьорден",
                            Password = "password",
                            Rating = 5.0m,
                            RoleId = new Guid("898fe428-53b7-4f5d-ab90-569056306b81")
                        },
                        new
                        {
                            Id = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bossofthegym@gmail.com",
                            FirstName = "Біллі",
                            ImageId = new Guid("0d041849-6db3-4121-823e-292792be1160"),
                            LastName = "Герінґтон",
                            Password = "password",
                            Rating = 2.5m,
                            RoleId = new Guid("fb2864bc-9d83-47b0-8320-56c9d197a714")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.UserTags", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTags");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("51ab773e-e705-4a23-8dbe-aa4d07a71620"),
                            TagId = new Guid("d8cce667-ab65-4536-a65f-30163239fdc4")
                        },
                        new
                        {
                            UserId = new Guid("7c183954-3105-4c15-85c8-25d802f80444"),
                            TagId = new Guid("25d50f0e-0b34-482e-b186-234aaae45a04")
                        },
                        new
                        {
                            UserId = new Guid("9ab9e09c-476f-4bb4-885d-fc8ac029cc01"),
                            TagId = new Guid("61207f9b-99f9-46fb-a165-c163f667c05b")
                        },
                        new
                        {
                            UserId = new Guid("d6f15473-3d1a-49a8-9bcb-ce3cf40e0c70"),
                            TagId = new Guid("af3ae483-929a-4c10-93b9-efb1886156ab")
                        },
                        new
                        {
                            UserId = new Guid("4a0f7ec6-33d1-4a8c-b4e5-76c325bc5aa8"),
                            TagId = new Guid("38a2b74c-e813-468e-be79-b84aa5122536")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("Comments")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("Comments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "Sender")
                        .WithMany("CommentsSended")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Favor");

                    b.Navigation("Party");

                    b.Navigation("Post");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Favors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("FavorImages")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("FavorImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Favor");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("FavorTags")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("FavorTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Favor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Like", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("Likes")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("Likes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "Sender")
                        .WithMany("LikesSended")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Favor");

                    b.Navigation("Party");

                    b.Navigation("Post");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Parties")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("PartyImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyImages")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyTags")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("PartyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyUsers", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyUsers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("PartyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("PostImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.UserTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavorImages");

                    b.Navigation("FavorTags");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Image", b =>
                {
                    b.Navigation("FavorImages");

                    b.Navigation("PartyImages");

                    b.Navigation("PostImages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PartyImages");

                    b.Navigation("PartyTags");

                    b.Navigation("PartyUsers");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostImages");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Tag", b =>
                {
                    b.Navigation("FavorTags");

                    b.Navigation("PartyTags");

                    b.Navigation("PostTags");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommentsSended");

                    b.Navigation("Favors");

                    b.Navigation("Likes");

                    b.Navigation("LikesSended");

                    b.Navigation("Parties");

                    b.Navigation("PartyUsers");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Posts");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
