// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pappion.Infrastructure;

#nullable disable

namespace Pappion.Infrastructure.Migrations
{
    [DbContext(typeof(PappionDbContext))]
    [Migration("20230611142601_PappionMigration")]
    partial class PappionMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid?>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FavorId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75727d13-0ddc-4eb3-9bf2-58a168703285"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("a0e33d5d-7a7f-43a3-b29b-e11f4b966a7a"),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            Text = "Увага! це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("fed98627-4e5a-4499-80d6-096c2550856e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PartyId = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            Text = "Джакузі з скінхедом це звучить дуже цікаво! Я обов'язково прийду!"
                        },
                        new
                        {
                            Id = new Guid("91c3f674-8924-44bd-ad42-a2363d9e4220"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("0b2cd57e-70ff-4f71-9447-c3adf8c6ad2a"),
                            Grade = 0m,
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            Text = "Масаж це дуже крута послуга! Раджу всім спробувати!"
                        },
                        new
                        {
                            Id = new Guid("e37e3028-64d0-4e6a-9aea-f27c6323ad07"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            Text = "Гаррі це дуже файний пацан! Стоп...",
                            UserId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("a5dde38c-f13a-43d4-aad5-b4ac5f6d87cb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("14a808c3-3141-4d8a-b444-c6b522a9c2f2"),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            Text = "Незабутні враження від Карпат це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("a2f30716-5e23-441c-8a82-6e42a497e75a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PartyId = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            Text = "Вечірня прогулянка по місту це звучить дуже цікаво! Я обов'язково прийду!"
                        },
                        new
                        {
                            Id = new Guid("18809a9b-2e6e-4508-a185-2cc898c12236"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("fb42d12f-59c9-45aa-827b-c6303e3f8977"),
                            Grade = 0m,
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            Text = "Косметична процедура це дуже крута послуга! Раджу всім спробувати!"
                        },
                        new
                        {
                            Id = new Guid("79d15b0b-fc5a-4bc5-8238-afc94f8ea69d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            Text = "Еран це дуже файний пацан! Стоп...",
                            UserId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("8c63d208-d821-403e-ad9d-dc5b5e055b09"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("9b19e35e-de58-4e36-a280-cebeeb7e753d"),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            Text = "Смаколики Карпатської кухні це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("6d02e87a-990a-4d55-a7b0-8983dc8e18a1"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PartyId = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            Text = "Вечірня прогулянка по місту це звучить дуже цікаво! Я обов'язково прийду!"
                        },
                        new
                        {
                            Id = new Guid("c9bb68df-124c-4cd9-bbcd-fee6d7998c10"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("a58a3fef-b347-449f-846a-67ce30b6df88"),
                            Grade = 0m,
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            Text = "Персональний тренер це дуже крута послуга! Раджу всім спробувати!"
                        },
                        new
                        {
                            Id = new Guid("91483077-0460-4681-a6ba-34ed0986f021"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            Text = "Ґеральт це дуже файний пацан! Стоп...",
                            UserId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("16a56a9b-09ab-4674-aaa1-aa58e28e722c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("05424771-6fcb-4e54-b77c-aa1cc0aa8fdb"),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            Text = "Неймовірні пейзажі Карпат це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("4c07a54f-8c7b-42a3-b36b-cec405362cfd"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PartyId = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            Text = "Вечірка вдома з настільними іграми це звучить дуже цікаво! Я обов'язково прийду!"
                        },
                        new
                        {
                            Id = new Guid("34db0745-f06d-4061-b1f2-d02d9eccfdac"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("e7f6c4d4-2072-4e91-b2e3-9060877b2592"),
                            Grade = 0m,
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            Text = "Ретельна манікюр і педикюр це дуже крута послуга! Раджу всім спробувати!"
                        },
                        new
                        {
                            Id = new Guid("9ba61268-e4b4-4e3d-bc34-9eac4996181d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            Text = "Тайлер це дуже файний пацан! Стоп...",
                            UserId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("bb73ed0a-1715-4884-8f6b-601143ab45f1"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PostId = new Guid("0af98481-bfc9-4888-a717-93d62b1f1f6f"),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            Text = "Зимові пригоди у Карпатах це дуже корисна публікація!"
                        },
                        new
                        {
                            Id = new Guid("bfa99bc5-bdad-452e-995b-270816a78503"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            PartyId = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            Text = "Концерт Rammstein це звучить дуже цікаво! Я обов'язково прийду!"
                        },
                        new
                        {
                            Id = new Guid("b865d68a-df02-4e94-9bef-f5eb397eca82"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("9b557f2d-7c09-4979-a298-164dd7eba446"),
                            Grade = 0m,
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            Text = "Сеанс йоги це дуже крута послуга! Раджу всім спробувати!"
                        },
                        new
                        {
                            Id = new Guid("6490fcb9-326f-46d7-b7d3-7bbd618e6a9f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0m,
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            Text = "Біллі це дуже файний пацан! Стоп...",
                            UserId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Favors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b2cd57e-70ff-4f71-9447-c3adf8c6ad2a"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Найкращі майстри масажу готові показати всі свої вміння на вашій задубілій спині.",
                            Price = 50.5m,
                            Rating = 0m,
                            Title = "Масаж"
                        },
                        new
                        {
                            Id = new Guid("fb42d12f-59c9-45aa-827b-c6303e3f8977"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Отримайте розкішну косметичну процедуру, яка підкреслить вашу природну красу і зробить вашу шкіру сяючою.",
                            Price = 80.0m,
                            Rating = 0m,
                            Title = "Косметична процедура"
                        },
                        new
                        {
                            Id = new Guid("a58a3fef-b347-449f-846a-67ce30b6df88"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Досвідчений тренер допоможе вам досягнути ваших фітнес-цілей, розробивши індивідуальну тренувальну програму для вас.",
                            Price = 70.2m,
                            Rating = 0m,
                            Title = "Персональний тренер"
                        },
                        new
                        {
                            Id = new Guid("e7f6c4d4-2072-4e91-b2e3-9060877b2592"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Розкішний манікюр і педикюр, який зробить ваші нігті і ніжки неймовірно чудовими і доглянутими.",
                            Price = 45.8m,
                            Rating = 0m,
                            Title = "Ретельна манікюр і педикюр"
                        },
                        new
                        {
                            Id = new Guid("9b557f2d-7c09-4979-a298-164dd7eba446"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Розслабтеся і зосередьтеся на своєму тілі та розумі під час особистого сеансу йоги з досвідченим інструктором.",
                            Price = 55.3m,
                            Rating = 0m,
                            Title = "Сеанс йоги"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorImages", b =>
                {
                    b.Property<Guid>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("FavorId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("FavorImages");

                    b.HasData(
                        new
                        {
                            FavorId = new Guid("0b2cd57e-70ff-4f71-9447-c3adf8c6ad2a"),
                            ImageId = new Guid("572f1c26-363b-4121-afa9-9e296e5ad045")
                        },
                        new
                        {
                            FavorId = new Guid("fb42d12f-59c9-45aa-827b-c6303e3f8977"),
                            ImageId = new Guid("19203269-ec8e-45d9-ab4f-d1502ad94eec")
                        },
                        new
                        {
                            FavorId = new Guid("a58a3fef-b347-449f-846a-67ce30b6df88"),
                            ImageId = new Guid("99b34ba2-01eb-49ba-b145-9756ddd154a8")
                        },
                        new
                        {
                            FavorId = new Guid("e7f6c4d4-2072-4e91-b2e3-9060877b2592"),
                            ImageId = new Guid("64fdb42b-9d88-462b-ba09-1995df146ab3")
                        },
                        new
                        {
                            FavorId = new Guid("9b557f2d-7c09-4979-a298-164dd7eba446"),
                            ImageId = new Guid("82c8d3a6-5d22-473c-bd3b-6ecede003a15")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorTags", b =>
                {
                    b.Property<Guid>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("FavorId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FavorTags");

                    b.HasData(
                        new
                        {
                            FavorId = new Guid("0b2cd57e-70ff-4f71-9447-c3adf8c6ad2a"),
                            TagId = new Guid("666a06b6-6fb1-41b0-8515-a2af75ef8e29")
                        },
                        new
                        {
                            FavorId = new Guid("fb42d12f-59c9-45aa-827b-c6303e3f8977"),
                            TagId = new Guid("0aea94ab-1131-4933-8e6c-beafb1cff31e")
                        },
                        new
                        {
                            FavorId = new Guid("a58a3fef-b347-449f-846a-67ce30b6df88"),
                            TagId = new Guid("16951066-201b-4332-8e4a-4160eeb8fe32")
                        },
                        new
                        {
                            FavorId = new Guid("e7f6c4d4-2072-4e91-b2e3-9060877b2592"),
                            TagId = new Guid("b1b6cc19-25b4-4ab8-b9cc-e69bdfb93b2e")
                        },
                        new
                        {
                            FavorId = new Guid("9b557f2d-7c09-4979-a298-164dd7eba446"),
                            TagId = new Guid("9f0f8ceb-b8f9-495f-b207-17bb9fcfe66e")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("572f1c26-363b-4121-afa9-9e296e5ad045"),
                            Path = "b7888fb1-1207-414c-a6cc-093501e728b6.png"
                        },
                        new
                        {
                            Id = new Guid("19203269-ec8e-45d9-ab4f-d1502ad94eec"),
                            Path = "9b76e9e5-e4c3-43b1-aa45-4e652ec699eb.png"
                        },
                        new
                        {
                            Id = new Guid("99b34ba2-01eb-49ba-b145-9756ddd154a8"),
                            Path = "bcca28a6-139b-4577-91e1-31817de792df.png"
                        },
                        new
                        {
                            Id = new Guid("64fdb42b-9d88-462b-ba09-1995df146ab3"),
                            Path = "4e0be48c-2382-4170-b967-c0947f134f65.png"
                        },
                        new
                        {
                            Id = new Guid("82c8d3a6-5d22-473c-bd3b-6ecede003a15"),
                            Path = "ffafab99-2456-4f46-bd48-623dbed40b5f.png"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid?>("FavorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FavorId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0244f0f2-6b54-4178-aa0a-6f3f4544e570"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("a0e33d5d-7a7f-43a3-b29b-e11f4b966a7a"),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("83ac855b-df9e-4d5b-8600-cd723d5c6102"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("0b2cd57e-70ff-4f71-9447-c3adf8c6ad2a"),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("f9c954cc-e81c-4a6c-988b-bc3c2e7a3a94"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartyId = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("aed5d499-c53b-400e-871e-84e6130a9e2c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            UserId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("6ef37c22-f75e-411d-b5d7-a22f8c091e6d"),
                            CommentId = new Guid("75727d13-0ddc-4eb3-9bf2-58a168703285"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("689a1fba-07e6-4844-98e5-4fed6c6ae5f7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("14a808c3-3141-4d8a-b444-c6b522a9c2f2"),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("6d041ca5-a6eb-471d-890e-2527ba413f05"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("fb42d12f-59c9-45aa-827b-c6303e3f8977"),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("0bb869f0-f52c-4e9f-a238-d98b54835f64"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartyId = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("3285d348-2cdf-41d7-97d4-1e8105443283"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            UserId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("c0034afa-b8e1-4b2d-a432-c2818507c6a7"),
                            CommentId = new Guid("fed98627-4e5a-4499-80d6-096c2550856e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("874ee5d1-7a10-4b02-9101-5c22afce048e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("9b19e35e-de58-4e36-a280-cebeeb7e753d"),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("92efe2fe-f957-462a-baa9-f4790dcc5db6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("a58a3fef-b347-449f-846a-67ce30b6df88"),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("46bb5db6-bfce-49d9-aef1-ce67ca818914"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartyId = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("930e5a4a-dae9-43bc-81bd-402249bf8095"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            UserId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("7d2fb88c-bb31-4dae-b99e-8c3b02dd6ebc"),
                            CommentId = new Guid("91c3f674-8924-44bd-ad42-a2363d9e4220"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("3f08f39a-7133-4831-93d0-07ed9d7a859a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("05424771-6fcb-4e54-b77c-aa1cc0aa8fdb"),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("03334407-327e-4cde-97a7-d018d27093dc"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("e7f6c4d4-2072-4e91-b2e3-9060877b2592"),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("f9e08a7d-53df-4db1-848d-590d5b210815"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartyId = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("f1fca45e-8aaf-4ec6-9b87-0370e3986298"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            UserId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("196f05f8-be96-43f9-a39e-8cb607daa87c"),
                            CommentId = new Guid("e37e3028-64d0-4e6a-9aea-f27c6323ad07"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("2ebe3325-05f1-49f4-a756-7ea7b7944517"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = new Guid("0af98481-bfc9-4888-a717-93d62b1f1f6f"),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        },
                        new
                        {
                            Id = new Guid("9ec545bb-2b12-40c0-a6db-90a89b9e8811"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavorId = new Guid("9b557f2d-7c09-4979-a298-164dd7eba446"),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        },
                        new
                        {
                            Id = new Guid("4e060140-4b37-44c4-b9ba-b6eaffea934d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartyId = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        },
                        new
                        {
                            Id = new Guid("6a460216-86cf-4eb0-99c5-dc7fd07c3663"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            UserId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        },
                        new
                        {
                            Id = new Guid("1292a6d3-4cc0-4068-a19f-7838c9be7f7d"),
                            CommentId = new Guid("a5dde38c-f13a-43d4-aad5-b4ac5f6d87cb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            AuthorId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5422),
                            Description = "Приходьте до мене сьогодні в джакузі, тут весело. Про оплату потім.",
                            Title = "Джакузі з скінхедом"
                        },
                        new
                        {
                            Id = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5463),
                            Description = "Хто хоче приєднатися до мене для вечірньої прогулянки по красивому місту? Разом ми зможемо насолодитися видами, побалакати і провести час весело. Приходьте!",
                            Title = "Вечірня прогулянка по місту"
                        },
                        new
                        {
                            Id = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            AuthorId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5475),
                            Description = "Хто хоче приєднатися до мене для вечірньої прогулянки по красивому місту? Разом ми зможемо насолодитися видами, побалакати і провести час весело. Приходьте!",
                            Title = "Вечірня прогулянка по місту"
                        },
                        new
                        {
                            Id = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            AuthorId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5485),
                            Description = "Хтось цікавиться проведенням вечірки вдома з настільними іграми? Я маю гарну колекцію ігор і шукаю компанію для веселого проведення вечора. Приєднуйтесь!",
                            Title = "Вечірка вдома з настільними іграми"
                        },
                        new
                        {
                            Id = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            AuthorId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5495),
                            Description = "Шукаю людей, які так само захоплені гуртом 'Rammstein' і хотіли б піти на їхній концерт. Разом буде набагато веселіше! Хто бажає долучитися?",
                            Title = "Концерт Rammstein"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyImages", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PartyImages");

                    b.HasData(
                        new
                        {
                            PartyId = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            ImageId = new Guid("572f1c26-363b-4121-afa9-9e296e5ad045")
                        },
                        new
                        {
                            PartyId = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            ImageId = new Guid("19203269-ec8e-45d9-ab4f-d1502ad94eec")
                        },
                        new
                        {
                            PartyId = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            ImageId = new Guid("99b34ba2-01eb-49ba-b145-9756ddd154a8")
                        },
                        new
                        {
                            PartyId = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            ImageId = new Guid("64fdb42b-9d88-462b-ba09-1995df146ab3")
                        },
                        new
                        {
                            PartyId = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            ImageId = new Guid("82c8d3a6-5d22-473c-bd3b-6ecede003a15")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyTags", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PartyTags");

                    b.HasData(
                        new
                        {
                            PartyId = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            TagId = new Guid("666a06b6-6fb1-41b0-8515-a2af75ef8e29")
                        },
                        new
                        {
                            PartyId = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            TagId = new Guid("0aea94ab-1131-4933-8e6c-beafb1cff31e")
                        },
                        new
                        {
                            PartyId = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            TagId = new Guid("16951066-201b-4332-8e4a-4160eeb8fe32")
                        },
                        new
                        {
                            PartyId = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            TagId = new Guid("b1b6cc19-25b4-4ab8-b9cc-e69bdfb93b2e")
                        },
                        new
                        {
                            PartyId = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            TagId = new Guid("9f0f8ceb-b8f9-495f-b207-17bb9fcfe66e")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyUsers", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PartyUsers");

                    b.HasData(
                        new
                        {
                            PartyId = new Guid("e57a640b-ede4-441b-8b9f-39a2e0a0467e"),
                            UserId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            PartyId = new Guid("92455345-381b-4771-bd6b-41898d1a1426"),
                            UserId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            PartyId = new Guid("9649603d-fb17-44d3-bcd5-9813142cdb38"),
                            UserId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            PartyId = new Guid("c34b45b1-e87b-42e0-afb5-6df24d2a5a4a"),
                            UserId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            PartyId = new Guid("34f016ae-83a9-48cd-8f95-72ac4c588f3f"),
                            UserId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be063f47-08c2-4e73-ac21-3195afd9b48f"),
                            Phone = "+380687654587",
                            UserId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37")
                        },
                        new
                        {
                            Id = new Guid("09545dc9-64fc-4e62-b782-26e9a998708d"),
                            Phone = "+380988234901",
                            UserId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583")
                        },
                        new
                        {
                            Id = new Guid("1ea036dc-9cf8-41af-9dad-35c1fb44dc1f"),
                            Phone = "+380660981292",
                            UserId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe")
                        },
                        new
                        {
                            Id = new Guid("a66a7bd6-c60b-42bd-b67c-63004b5225f8"),
                            Phone = "+380508672351",
                            UserId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a")
                        },
                        new
                        {
                            Id = new Guid("4208516f-22cb-4e6a-94ef-0ae3e9712aec"),
                            Phone = "+380955647834",
                            UserId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0e33d5d-7a7f-43a3-b29b-e11f4b966a7a"),
                            AuthorId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5234),
                            Description = "Карпати інфо шахраї! Я забронювала собі номер в одній з камер Азкабану, але дементори мене туди не впустили. Це жах!",
                            Title = "Увага!"
                        },
                        new
                        {
                            Id = new Guid("14a808c3-3141-4d8a-b444-c6b522a9c2f2"),
                            AuthorId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            CreatedDate = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5317),
                            Description = "Нещодавно повернулися з унікальної подорожі до Карпат і просто захоплюємося цим мальовничим куточком природи. Гірські ландшафти та заповідні ліси залишили незабутні враження в нашій пам'яті. Рекомендуємо всім любителям пригод відвідати цю частину України!",
                            Title = "Незабутні враження від Карпат"
                        },
                        new
                        {
                            Id = new Guid("9b19e35e-de58-4e36-a280-cebeeb7e753d"),
                            AuthorId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            CreatedDate = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5329),
                            Description = "Під час нашої поїздки в Карпати ми не лише насолоджувалися природою, але й смакували справжні кулінарні шедеври. Місцеві страви, такі як вершкові гриби та банош, просто вражають своїм неповторним смаком. Рекомендуємо спробувати!",
                            Title = "Смаколики Карпатської кухні"
                        },
                        new
                        {
                            Id = new Guid("05424771-6fcb-4e54-b77c-aa1cc0aa8fdb"),
                            AuthorId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            CreatedDate = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5340),
                            Description = "Під час наших пішохідних прогулянок по Карпатах ми були просто зачаровані мальовничими пейзажами, які відкривалися перед нами. Гірські потоки, зелені луки та красиві гори - все це створює незабутню атмосферу та надихає на нові відкриття. Рекомендуємо це місце для всіх любителів активного відпочинку та красивої природи!",
                            Title = "Неймовірні пейзажі Карпат"
                        },
                        new
                        {
                            Id = new Guid("0af98481-bfc9-4888-a717-93d62b1f1f6f"),
                            AuthorId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            CreatedDate = new DateTime(2023, 6, 11, 17, 26, 0, 577, DateTimeKind.Local).AddTicks(5355),
                            Description = "Наша зимова подорож до Карпат принесла нам незабутні враження від катання на лижах. Добре обладнані гірськолижні курорти та різноманітні траси задовольнять навіть найвибагливіших любителів лижного спорту. Насолоджуйтесь зимовими пригодами у Карпатах!",
                            Title = "Зимові пригоди у Карпатах"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostImages", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PostImages");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("a0e33d5d-7a7f-43a3-b29b-e11f4b966a7a"),
                            ImageId = new Guid("572f1c26-363b-4121-afa9-9e296e5ad045")
                        },
                        new
                        {
                            PostId = new Guid("14a808c3-3141-4d8a-b444-c6b522a9c2f2"),
                            ImageId = new Guid("19203269-ec8e-45d9-ab4f-d1502ad94eec")
                        },
                        new
                        {
                            PostId = new Guid("9b19e35e-de58-4e36-a280-cebeeb7e753d"),
                            ImageId = new Guid("99b34ba2-01eb-49ba-b145-9756ddd154a8")
                        },
                        new
                        {
                            PostId = new Guid("05424771-6fcb-4e54-b77c-aa1cc0aa8fdb"),
                            ImageId = new Guid("64fdb42b-9d88-462b-ba09-1995df146ab3")
                        },
                        new
                        {
                            PostId = new Guid("0af98481-bfc9-4888-a717-93d62b1f1f6f"),
                            ImageId = new Guid("82c8d3a6-5d22-473c-bd3b-6ecede003a15")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostTags", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("a0e33d5d-7a7f-43a3-b29b-e11f4b966a7a"),
                            TagId = new Guid("666a06b6-6fb1-41b0-8515-a2af75ef8e29")
                        },
                        new
                        {
                            PostId = new Guid("14a808c3-3141-4d8a-b444-c6b522a9c2f2"),
                            TagId = new Guid("0aea94ab-1131-4933-8e6c-beafb1cff31e")
                        },
                        new
                        {
                            PostId = new Guid("9b19e35e-de58-4e36-a280-cebeeb7e753d"),
                            TagId = new Guid("16951066-201b-4332-8e4a-4160eeb8fe32")
                        },
                        new
                        {
                            PostId = new Guid("05424771-6fcb-4e54-b77c-aa1cc0aa8fdb"),
                            TagId = new Guid("b1b6cc19-25b4-4ab8-b9cc-e69bdfb93b2e")
                        },
                        new
                        {
                            PostId = new Guid("0af98481-bfc9-4888-a717-93d62b1f1f6f"),
                            TagId = new Guid("9f0f8ceb-b8f9-495f-b207-17bb9fcfe66e")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4756fc6a-427e-48b5-a2c1-e63bc7274c6c"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("e577f21a-3707-4ed6-8268-eaee433a16fa"),
                            Name = "Resident"
                        },
                        new
                        {
                            Id = new Guid("0e158ba4-e2c0-470a-bf68-150f29c3a375"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("666a06b6-6fb1-41b0-8515-a2af75ef8e29"),
                            Name = "Лижі"
                        },
                        new
                        {
                            Id = new Guid("0aea94ab-1131-4933-8e6c-beafb1cff31e"),
                            Name = "Сноуборд"
                        },
                        new
                        {
                            Id = new Guid("16951066-201b-4332-8e4a-4160eeb8fe32"),
                            Name = "Настільні ігри"
                        },
                        new
                        {
                            Id = new Guid("b1b6cc19-25b4-4ab8-b9cc-e69bdfb93b2e"),
                            Name = "Велосипед"
                        },
                        new
                        {
                            Id = new Guid("9f0f8ceb-b8f9-495f-b207-17bb9fcfe66e"),
                            Name = "Кемпінг"
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harrypotter@gmail.com",
                            FirstName = "Гаррі",
                            ImageId = new Guid("572f1c26-363b-4121-afa9-9e296e5ad045"),
                            LastName = "Поттер",
                            Password = "password",
                            Rating = 3.5m,
                            RoleId = new Guid("4756fc6a-427e-48b5-a2c1-e63bc7274c6c")
                        },
                        new
                        {
                            Id = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tatakae@gmail.com",
                            FirstName = "Еран",
                            ImageId = new Guid("19203269-ec8e-45d9-ab4f-d1502ad94eec"),
                            LastName = "Єґа",
                            Password = "password",
                            Rating = 1.5m,
                            RoleId = new Guid("e577f21a-3707-4ed6-8268-eaee433a16fa")
                        },
                        new
                        {
                            Id = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "killing.monsters@gmail.com",
                            FirstName = "Ґеральт",
                            ImageId = new Guid("99b34ba2-01eb-49ba-b145-9756ddd154a8"),
                            LastName = "з Рівії",
                            Password = "password",
                            Rating = 4.5m,
                            RoleId = new Guid("0e158ba4-e2c0-470a-bf68-150f29c3a375")
                        },
                        new
                        {
                            Id = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "not.exist@gmail.com",
                            FirstName = "Тайлер",
                            ImageId = new Guid("64fdb42b-9d88-462b-ba09-1995df146ab3"),
                            LastName = "Дьорден",
                            Password = "password",
                            Rating = 5.0m,
                            RoleId = new Guid("e577f21a-3707-4ed6-8268-eaee433a16fa")
                        },
                        new
                        {
                            Id = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bossofthegym@gmail.com",
                            FirstName = "Біллі",
                            ImageId = new Guid("82c8d3a6-5d22-473c-bd3b-6ecede003a15"),
                            LastName = "Герінґтон",
                            Password = "password",
                            Rating = 2.5m,
                            RoleId = new Guid("e577f21a-3707-4ed6-8268-eaee433a16fa")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.UserTags", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTags");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("da4c8bc8-5851-4985-a6d1-97e6bfec4b37"),
                            TagId = new Guid("666a06b6-6fb1-41b0-8515-a2af75ef8e29")
                        },
                        new
                        {
                            UserId = new Guid("b24d55b7-101e-4a8f-abb1-ac37c1a11583"),
                            TagId = new Guid("0aea94ab-1131-4933-8e6c-beafb1cff31e")
                        },
                        new
                        {
                            UserId = new Guid("ed7048fa-29ca-43a1-a9d1-b35da6f256fe"),
                            TagId = new Guid("16951066-201b-4332-8e4a-4160eeb8fe32")
                        },
                        new
                        {
                            UserId = new Guid("69b372be-b113-427b-abc8-5b6c4e13638a"),
                            TagId = new Guid("b1b6cc19-25b4-4ab8-b9cc-e69bdfb93b2e")
                        },
                        new
                        {
                            UserId = new Guid("441fd4ce-a4ba-4503-b671-ae1aba9097bb"),
                            TagId = new Guid("9f0f8ceb-b8f9-495f-b207-17bb9fcfe66e")
                        });
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("Comments")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("Comments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "Sender")
                        .WithMany("CommentsSended")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Favor");

                    b.Navigation("Party");

                    b.Navigation("Post");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Favors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("FavorImages")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("FavorImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Favor");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.FavorTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("FavorTags")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("FavorTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Favor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Like", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Favor", "Favor")
                        .WithMany("Likes")
                        .HasForeignKey("FavorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("Likes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "Sender")
                        .WithMany("LikesSended")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Favor");

                    b.Navigation("Party");

                    b.Navigation("Post");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Parties")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("PartyImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyImages")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyTags")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("PartyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PartyUsers", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Party", "Party")
                        .WithMany("PartyUsers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("PartyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostImages", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("PostImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.PostTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.UserTags", b =>
                {
                    b.HasOne("Pappion.Domain.Entities.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pappion.Domain.Entities.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Favor", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavorImages");

                    b.Navigation("FavorTags");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Image", b =>
                {
                    b.Navigation("FavorImages");

                    b.Navigation("PartyImages");

                    b.Navigation("PostImages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Party", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PartyImages");

                    b.Navigation("PartyTags");

                    b.Navigation("PartyUsers");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostImages");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.Tag", b =>
                {
                    b.Navigation("FavorTags");

                    b.Navigation("PartyTags");

                    b.Navigation("PostTags");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Pappion.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommentsSended");

                    b.Navigation("Favors");

                    b.Navigation("Likes");

                    b.Navigation("LikesSended");

                    b.Navigation("Parties");

                    b.Navigation("PartyUsers");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Posts");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
